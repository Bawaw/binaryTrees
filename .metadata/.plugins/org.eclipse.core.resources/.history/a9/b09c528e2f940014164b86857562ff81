package binaryTree;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class BinaryTree<E> {
	private BinaryNode<E> root;

	public BinaryTree(BinaryNode<E> root) {
		this.root = root;
	}

	public BinaryNode<E> getRoot() {
		return root;
	}

	public void setRoot(BinaryNode<E> root) {
		this.root = root;
	}

	// recursieve implementatie
	public void printPreorder() {
		printPreorder(root);
		System.out.println();
	}

	private void printPreorder(BinaryNode<E> node) {
		if (node == null)
			return;
		System.out.print(node.toString() + " ");
		printPreorder(node.getLeft());
		printPreorder(node.getRight());
	}

	// iteratieve implementatie
	public void printPreorder2() {
		Stack<BinaryNode<E>> stack = new Stack<BinaryNode<E>>();
		BinaryNode<E> node = root;
		while (!stack.isEmpty() || node != null) {
			if (node != null) {
				System.out.print(node.toString() + " ");
				stack.push(node.getRight());
				node = node.getLeft();
			} else {
				node = stack.pop();
			}
		}
		System.out.println();
	}

	public void printInorder() {
		printInorder(root);
		System.out.println();
	}

	private void printInorder(BinaryNode<E> node) {
		if (node != null) {
			printInorder(node.getLeft());
			System.out.print(node + " ");
			printInorder(node.getRight());
		}
	}

	public void printInorder2() {
		Stack<BinaryNode<E>> stack = new Stack<BinaryNode<E>>();
		BinaryNode<E> node = root;
		while (!stack.isEmpty() || node != null) {
			if (node != null) {
				stack.push(node);
				node = node.getLeft();
			} else {
				node = stack.pop();
				System.out.print(node.toString() + " ");
				node = node.getRight();
			}
		}
		System.out.println();
	}

	public void printPostOrder() {
		printPostOrder(root);
		System.out.println();
	}

	private void printPostOrder(BinaryNode<E> node) {
		if (node == null)
			return;
		printPostOrder(node.getLeft());
		printPostOrder(node.getRight());
		System.out.print(node.toString() + " ");
	}

	public void printLevelOrder2() {
		Queue<BinaryNode<E>> queue = new LinkedList<BinaryNode<E>>();
		BinaryNode<E> node = root;
		queue.add(node);
		while (!queue.isEmpty()) {
			node = queue.poll();
			if (node != null) {
				System.out.print(node + " ");
				queue.add(node.getLeft());
				queue.add(node.getRight());
			}
		}
		System.out.println();
	}
	
	public int getMaxDepth(){
		return getMaxDepth(root);
	}
	
	private int getMaxDepth(BinaryNode<E> node){
		if(node == null) return 0;
		return 1 + Math.max(getMaxDepth(node.getLeft()), getMaxDepth(node.getRight()));
	}
	
	public int getMaxDepth2(){
		Queue<BinaryNode<E>> queue = new LinkedList<BinaryNode<E>>();
		queue.add(root);
		int depth = 0; 
		BinaryNode<E> node;
		while (!queue.isEmpty()){
			depth++;
			Queue<BinaryNode<E>> childrenQueue = new LinkedList<BinaryNode<E>>();
			while(!queue.isEmpty()) {
				node = queue.poll();
				childrenQueue.add(node.getLeft());
				childrenQueue.add(node.getRight());

			}
			
		}
	}

}
