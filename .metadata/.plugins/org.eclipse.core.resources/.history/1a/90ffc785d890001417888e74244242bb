package binaryMinHeap;

public class BinaryMinHeap<E extends Comparable<E>> {

	private E[] heap;
	private int size;

	public BinaryMinHeap(int capacity) {
		heap = (E[]) new Comparable[capacity];
		size = 0;
	}

	public int getSize() {
		return size;
	}

	@Override
	public String toString() {
		StringBuffer buffer = new StringBuffer();
		for (int i = 0; i < size; ++i) {
			buffer.append(heap[i] + " ");
		}
		return buffer.toString();
	}

	private void doubleCapacity() {
		E[] oldHeap = heap;
		heap = (E[]) new Comparable[oldHeap.length * 2];
		for (int i = 0; i < oldHeap.length; ++i) {
			heap[i] = oldHeap[i];
		}
	}

	public void insert(E i) {
		insert(i,size);
		size++;
	}

	// toegevoegde waarde kleiner dan ouder? verwissel
	private void insert(E i, int index) {
		if (index > 0 && i.compareTo(heap[(index - 1) / 2]) > 0) {
			heap[index] = heap[(index-1)/2];
			insert(i,(index-1)/2);
		}
		else 
			heap[index] = i;
	}
	

public E getMax(){
	if (root == null)
		return null;

	int end = Math.Floor((size-2)/2);
	Node max = heap[size-1];
	for (int i=size-2 ; i>end; i--){
		if (heap[i] > max)
			max = heap[i];
	} 
}
}
